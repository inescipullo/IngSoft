dec_pp_type(arr(rel(int,T),int)).
arr(A,N) :-
  0 < N &
  pfun(A) &
  dom(A,int(1,N)).

dec_pp_type(n_arr(rel(int,T),int)).
n_arr(A,N) :-
  neg(
    0 < N &
    pfun(A) &
    dom(A,int(1,N))
  ).

dec_pp_type(get(rel(int,T),int,T)).
get(A,I,E) :- A = {[I,E] / A1} & [I,E] nin A1 & dec(A1,rel(int,T)).

dec_pp_type(n_get(rel(int,T),int,T)).
n_get(A,I,E) :- [I,E] nin A.

dec_pp_type(set(rel(int,T),int,T,rel(int,T))).
set(A,I,E,B) :-
  A = {[I,X]/C} & [I,X] nin C & dec(C,rel(int,T)) & dec(X,T) &
  B = {[I,E]/C}.

dec_pp_type(sorted(rel(int,int))).
sorted(A) :-
  foreach([[I1,E1] in A,[I2,E2] in A], dec([I1,I2,E1,E2],int) &
      (I1 =< I2 implies E1 =< E2)
  ).

dec_pp_type(n_sorted(rel(int,int))).
n_sorted(A) :-
  neg(
    foreach([[I1,E1] in A,[I2,E2] in A], dec([I1,I2,E1,E2],int) &
      (I1 =< I2 implies E1 =< E2)
    )
  ).

dec_pp_type(sortedk(rel(int,int),int)).
sortedk(A,K) :-
  0 < K &
  foreach([[I1,E1] in A,[I2,E2] in A], dec([I1,I2,E1,E2],int) &
    (I2 =< K implies (I1 =< I2 implies E1 =< E2))
  ).

dec_pp_type(n_sortedk(rel(int,int),int)).
n_sortedk(A,K) :-
  neg(
    0 < K &
    foreach([[I1,E1] in A,[I2,E2] in A], dec([I1,I2,E1,E2],int) &
      (I2 =< K implies (I1 =< I2 implies E1 =< E2))
    )
  ).

dec_pp_type(bijarr(rel(int,T))).
bijarr(A) :- inv(A,B) & pfun(B) & dec(B,rel(T,int)).

dec_pp_type(n_bijarr(rel(int,T))).
n_bijarr(A) :-
  neg(inv(A,B) & pfun(B) & dec(B,rel(T,int))).

% sums the first K components of array A
% whose dimension is N
dec_pp_type(arrsum(rel(int,int),int,int,int)).
arrsum(A,N,K,S) :-
  K =< N &
  arr(Tr,K) & dec([Tr,Tr1],rel(int,int)) &
  get(A,1,X) & dec(X,int) &
  Tr = {[1,X],[K,S] / Tr1} & [1,X] nin Tr1 & [K,S] nin Tr1 &
  foreach(I in int(2,K),[I1,Y,Z,Si],dec([I,I1,Y,Z,Si],int) &
    [I,Si] in Tr,
    I1 is I - 1 & applyTo(Tr,I1,Z) & applyTo(A,I,Y) & Si is Y + Z
  ).

dec_pp_type(head(rel(int,T),T)).
head(A,E) :- get(A,1,E).

dec_pp_type(last(rel(int,T),int,T)).
last(A,N,E) :- get(A,N,E).

dec_pp_type(add(rel(int,T),int,T,rel(int,T))).
add(A,N,E,B) :- N1 is N + 1 & B = {[N1,E] / A} & dec(N1,int).

dec_pp_type(prefix(rel(int,T),int,int,rel(int,T))).
prefix(A,N,K,B) :- id(int(1,K),I) & comppf(I,A,B) & dec(I,rel(int,int)).

dec_pp_type(suffix(rel(int,T),int,int,rel(int,T))).
suffix(A,N,K,B) :- id(int(K,N),I) & comppf(I,A,B) & dec(I,rel(int,int)).

dec_pp_type(filter(set(int),rel(int,T),rel(int,T))).
filter(S,A,B) :- id(S,I) & comppf(I,A,B) & dec(I,rel(int,int)).

dec_pp_type(extract(rel(int,T),set(T),rel(int,T))).
extract(A,S,B) :- rres(A,S,B).