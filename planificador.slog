% TIPOS
def_type(t_proc_queue, set([int, process])).

def_type(t_tick, int).

parameters([Quantum]).

% ESTADO
variables([ProcQueue, Current, RemTicks]).

% DEFINICION AXIOMATICA
axiom(quantum).
dec_p_type(quantum(t_tick)).
quantum(Quantum) :- Quantum = 5.

% INVARIANTES
invariant(invPFun).
dec_p_type(invPFun(t_proc_queue)).
invPFun(ProcQueue) :- pfun(ProcQueue).

dec_p_type(n_invPFun(t_proc_queue)).
n_invPFun(ProcQueue) :- npfun(ProcQueue).

invariant(invIny).
dec_p_type(invIny(t_proc_queue)).
invIny(ProcQueue) :- let([Inv], dec(Inv, set([process, int])) & inv(ProcQueue, Inv), pfun(Inv)).

dec_p_type(n_invIny(t_proc_queue)).
n_invIny(ProcQueue) :- neg(let([Inv], dec(Inv, set([process, int])) & inv(ProcQueue, Inv), pfun(Inv))).

invariant(invNat).
dec_p_type(invNat(t_tick)).
invNat(RemTicks) :- RemTicks >= 0.

dec_p_type(n_invNat(t_tick)).
n_invNat(RemTicks) :- neg(RemTicks >= 0).

invariant(invDispatcher).
dec_p_type(invDispatcher(t_proc_queue, process)).
invDispatcher(ProcQueue, Current) :- let([Ran], dec(Ran, set(process)) & ran(ProcQueue, Ran), Current nin Ran & process:nullp nin Ran).

dec_p_type(n_invDispatcher(t_proc_queue, process)).
n_invDispatcher(ProcQueue, Current) :- neg(let([Ran], dec(Ran, set(process)) & ran(ProcQueue, Ran), Current nin Ran & process:nullp nin Ran)).

% ESTADO INICIAL
initial(initDispatcher).
dec_p_type(initDispatcher(t_proc_queue, process, t_tick)).
initDispatcher(ProcQueue, Current, RemTicks) :-
    ProcQueue = {} &
    Current = process:nullp &
    RemTicks = 0.

% OPERACIONES

%%% newProcess %%%
dec_p_type(newProcessOk(t_proc_queue, process, t_tick, process, t_proc_queue, process, t_tick)).
newProcessOk(ProcQueue, Current, RemTicks, NewProc, ProcQueue_, Current_, RemTicks_) :-
    ProcQueue neq {} &
    dec(Ran, set(process)) & ran(ProcQueue, Ran) & NewProc nin Ran &
    NewProc neq Current &
    NewProc neq process:nullp &
    dec(Dom, set(int)) & dom(ProcQueue, Dom) & 
    dec(Max, int) & smax(Dom, Max) & 
    Max1 is Max+1 & dec(Max1, int) &
    un(ProcQueue, {[Max1, NewProc]}, ProcQueue_) &
    Current_ = Current &
    RemTicks_ = RemTicks.

dec_p_type(newProcessOkEmptyQueue(t_proc_queue, process, t_tick, process, t_proc_queue, process, t_tick)).
newProcessOkEmptyQueue(ProcQueue, Current, RemTicks, NewProc, ProcQueue_, Current_, RemTicks_) :-
    ProcQueue = {} &
    dec(Ran, set(process)) & ran(ProcQueue, Ran) & NewProc nin Ran &
    NewProc neq Current &
    NewProc neq process:nullp &
    ProcQueue_ = {[1, NewProc]} &
    Current_ = Current &
    RemTicks_ = RemTicks.

dec_p_type(newProcessError(t_proc_queue, process, t_tick, process, t_proc_queue, process, t_tick)).
newProcessError(ProcQueue, Current, RemTicks, NewProc, ProcQueue_, Current_, RemTicks_) :-
    ((dec(Ran, set(process)) & ran(ProcQueue, Ran) & NewProc in Ran) or NewProc = Current or NewProc = process:nullp) &
    ProcQueue_ = ProcQueue &
    Current_ = Current &
    RemTicks_ = RemTicks.

operation(newProcess).
dec_p_type(newProcess(t_proc_queue, process, t_tick, process, t_proc_queue, process, t_tick)).
newProcess(ProcQueue, Current, RemTicks, NewProc, ProcQueue_, Current_, RemTicks_) :-
    newProcessOk(ProcQueue, Current, RemTicks, NewProc, ProcQueue_, Current_, RemTicks_)
    or
    newProcessOkEmptyQueue(ProcQueue, Current, RemTicks, NewProc, ProcQueue_, Current_, RemTicks_)
    or
    newProcessError(ProcQueue, Current, RemTicks, NewProc, ProcQueue_, Current_, RemTicks_).

%%% dispatch %%%
dec_p_type(tick(t_proc_queue, process, t_tick, t_proc_queue, process, t_tick)).
tick(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_) :-
    RemTicks > 0 &
    Current neq process:nullp &
    ProcQueue_ = ProcQueue &
    Current_ = Current &
    RemTicks_ is RemTicks - 1 & dec(RemTicks_, int).

dec_p_type(timeout(t_proc_queue, process, t_tick, t_proc_queue, process, t_tick)).
timeout(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_) :-
    ProcQueue neq {} &
    RemTicks = 0 &
    Current neq process:nullp &
    dec(Dom, set(int)) & dom(ProcQueue, Dom) & 
    dec(Max, int) & smax(Dom, Max) & 
    Max1 is Max+1 & dec(Max1, int) &
    un(ProcQueue, {[Max1, Current]}, ProcQueue_) &
    Current_ = process:nullp &
    RemTicks_ = 0.

dec_p_type(timeoutEmptyQueue(t_proc_queue, process, t_tick, t_proc_queue, process, t_tick)).
timeoutEmptyQueue(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_) :-
    ProcQueue = {} &
    RemTicks = 0 &
    Current neq process:nullp &
    ProcQueue_ = {[1, Current]} &
    Current_ = process:nullp &
    RemTicks_ = 0.

dec_p_type(idle(t_proc_queue, process, t_tick, t_proc_queue, process, t_tick)).
idle(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_) :-
    Current = process:nullp &
    ProcQueue = {} &
    ProcQueue_ = ProcQueue &
    Current_ = Current &
    RemTicks_ = RemTicks.

dec_p_type(dispatchProc(t_proc_queue, process, t_tick, t_proc_queue, process, t_tick)).
dispatchProc(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_) :-
    Current = process:nullp &
    ProcQueue neq {} &
    RemTicks = 0 &
    dec(Dom, set(int)) & dom(ProcQueue, Dom) & 
    dec(Min, int) & smin(Dom, Min) &
    dec(Head, process) & apply(ProcQueue, Min, Head) &
    diff(ProcQueue, {[Min, Head]}, ProcQueue_) &
    Current_ = Head &
    quantum(RemTicks_).

operation(dispatch).
dec_p_type(dispatch(t_proc_queue, process, t_tick, t_proc_queue, process, t_tick)).
dispatch(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_) :-
    tick(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_)
    or
    timeout(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_)
    or
    timeoutEmptyQueue(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_)
    or
    idle(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_)
    or
    dispatchProc(ProcQueue, Current, RemTicks, ProcQueue_, Current_, RemTicks_).

%%% terminateProc %%%
dec_p_type(terminateProcOk(t_proc_queue, process, process, t_proc_queue, process, t_tick)).
terminateProcOk(ProcQueue, Current, Proc, ProcQueue_, Current_, RemTicks_) :-
    Current = Proc &
    ProcQueue_ = ProcQueue &
    Current_ = process:nullp &
    RemTicks_ = 0.

dec_p_type(terminateProcError(t_proc_queue, process, t_tick, process, t_proc_queue, process, t_tick)).
terminateProcError(ProcQueue, Current, RemTicks, Proc, ProcQueue_, Current_, RemTicks_) :-
    Current neq Proc & 
    ProcQueue_ = ProcQueue &
    Current_ = Current &
    RemTicks_ = RemTicks.

operation(terminateProc).
dec_p_type(terminateProc(t_proc_queue, process, t_tick, process, t_proc_queue, process, t_tick)).
terminateProc(ProcQueue, Current, RemTicks, Proc, ProcQueue_, Current_, RemTicks_) :-
    terminateProcOk(ProcQueue, Current, Proc, ProcQueue_, Current_, RemTicks_)
    or
    terminateProcError(ProcQueue, Current, RemTicks, Proc, ProcQueue_, Current_, RemTicks_).
