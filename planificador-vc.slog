% Verification conditions for planificador.slog

% Run check_vcs_planificador to see if the program verifies all the VCs

:- notype_check.

:- consult('planificador.slog').

:- prolog_call((
    retractall(all_unsat_vc(_,_,_,_,_,_)),
    retractall(dinvariant(_,_,_)),
    retractall(daxiom(_,_,_)),
    (exists_file('planificador-all.pl') ->
       open('planificador-all.pl',read,StreamVC)
    ;
       print_notfile('planificador-all.pl')
    ),
    style_check(-singleton),
    setlog:consult_vc(StreamVC),
    style_check(+singleton),
    close(StreamVC))).

% Change this number for a different timeout (ms)
def_to(6000000).

:- prolog_call(nb_setval(vc_num,0)).
:- prolog_call(nb_setval(vc_ok,0)).
:- prolog_call(nb_setval(vc_err,0)).
:- prolog_call(nb_setval(vc_to,0)).
:- prolog_call(nb_setval(vc_time,0)).

:- prolog_call(dynamic(unsat_sol/6)).
:- prolog_call(dynamic(vc_proved/1)).

axioms_sat :-
  quantum(Quantum).

initDispatcher_sat_invPFun :-
  initDispatcher(ProcQueue,Current,RemTicks) &
  invPFun(ProcQueue).

initDispatcher_sat_invIny :-
  initDispatcher(ProcQueue,Current,RemTicks) &
  invIny(ProcQueue).

initDispatcher_sat_invNat :-
  initDispatcher(ProcQueue,Current,RemTicks) &
  invNat(RemTicks).

initDispatcher_sat_invDispatcher :-
  initDispatcher(ProcQueue,Current,RemTicks) &
  invDispatcher(ProcQueue,Current).

newProcess_is_sat :-
  newProcess(ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) & 
  delay([ProcQueue,Current,RemTicks] neq [ProcQueue_,Current_,RemTicks_],false).

newProcess_pi_invPFun(ProcQueue,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invPFun(ProcQueue) &
    newProcess(ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) implies
    invPFun(ProcQueue_)
  ).

newProcess_pi_invIny(ProcQueue,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invIny(ProcQueue) &
    newProcess(ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) implies
    invIny(ProcQueue_)
  ).

newProcess_pi_invNat(RemTicks,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invNat(RemTicks) &
    newProcess(ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) implies
    invNat(RemTicks_)
  ).

newProcess_pi_invDispatcher(ProcQueue,Current,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invDispatcher(ProcQueue,Current) &
    newProcess(ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_) implies
    invDispatcher(ProcQueue_,Current_)
  ).

dispatch_is_sat :-
  dispatch(ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) & 
  delay([ProcQueue,Current,RemTicks] neq [ProcQueue_,Current_,RemTicks_],false).

dispatch_pi_invPFun(ProcQueue,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invPFun(ProcQueue) &
    dispatch(ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) implies
    invPFun(ProcQueue_)
  ).

dispatch_pi_invIny(ProcQueue,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) :-
  invDispatcher(ProcQueue, Current) &
  neg(
    invIny(ProcQueue) &
    dispatch(ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) implies
    invIny(ProcQueue_)
  ).

dispatch_pi_invNat(RemTicks,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invNat(RemTicks) &
    dispatch(ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) implies
    invNat(RemTicks_)
  ).

dispatch_pi_invDispatcher(ProcQueue,Current,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) :-
  invIny(ProcQueue) &
  neg(
    invDispatcher(ProcQueue,Current) &
    dispatch(ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_) implies
    invDispatcher(ProcQueue_,Current_)
  ).

terminateProc_is_sat :-
  terminateProc(ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) & 
  delay([ProcQueue,Current,RemTicks] neq [ProcQueue_,Current_,RemTicks_],false).

terminateProc_pi_invPFun(ProcQueue,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invPFun(ProcQueue) &
    terminateProc(ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) implies
    invPFun(ProcQueue_)
  ).

terminateProc_pi_invIny(ProcQueue,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invIny(ProcQueue) &
    terminateProc(ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) implies
    invIny(ProcQueue_)
  ).

terminateProc_pi_invNat(RemTicks,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invNat(RemTicks) &
    terminateProc(ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) implies
    invNat(RemTicks_)
  ).

terminateProc_pi_invDispatcher(ProcQueue,Current,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invDispatcher(ProcQueue,Current) &
    terminateProc(ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_) implies
    invDispatcher(ProcQueue_,Current_)
  ).

update_time(Tf,Ti) :-
  prolog_call(
    (nb_getval(vc_time,VCT),
     VCT_ is VCT + Tf - Ti,
     nb_setval(vc_time,VCT_)
    )
  ).

update_count(C) :-
  prolog_call(
    (nb_getval(C,VCN),
     VCN_ is VCN + 1,
     nb_setval(C,VCN_)
    )
  ).

check_sat_vc(VCID) :-
  prolog_call((setlog:vc_proved(VCID) -> R = proved ; R = unproved)) &
  (R == unproved &
   write('\nChecking ') & write(VCID) & write(' ... ') &
   update_count(vc_num) &
   ((prolog_call(setlog(VCID)) &
    update_count(vc_ok) &
    prolog_call(assertz(vc_proved(VCID))) &
    write_ok)!
    or
    update_count(vc_err) &
    write_err
   )
   or
   R == proved
  ).

check_unsat_vc(VCID,TO,Opt) :-
  prolog_call(
    (VCID =.. [H | _],
     (\+setlog:vc_proved(H) ->
        setlog:all_unsat_vc(H,T,ID,VC,Op,VN),
        copy_term([VC,VN],[VCC,VNC]),
        write('\nChecking '), write(H), write(' ... '), flush_output,
        setlog(update_count(vc_num)),
        get_time(Ti),
        rsetlog(VC,TO,Cons,Res,Opt),
        get_time(Tf)
     ;
        Res = proved
     )
    )
  ) &
  ((Res = failure)! &
    update_count(vc_ok) &
    update_time(Tf,Ti) &
    prolog_call((retractall(setlog:unsat_sol(_,H,_,_,_,_)),
                 assertz(vc_proved(H)))) &
    write_ok
  or
   (Res = timeout)! &
    update_count(vc_to) &
    write_to
  or
    (Res = proved)!
  or
    update_count(vc_err) &
    prolog_call((term_string(VCC,VCS,[variable_names(VNC)]),
                 rsetlog_str(VCS,VNC,TO,_,_,[groundsol]))) &
    prolog_call((retractall(setlog:unsat_sol(_,H,_,_,_,_)),
                 assertz(unsat_sol(T,H,ID,Cons,VN,VNC)))) &
    write_err
  ).

write_ok :-
  prolog_call(ansi_format([bold,fg(green)],'OK',[])).

write_to :-
  prolog_call(ansi_format([bold,fg(255,255,50)],'TIMEOUT',[])).

write_err :-
  prolog_call(ansi_format([bold,fg(red)],'ERROR',[])).

check_vcs_planificador :-
   def_to(TO) &
   prolog_call(setlog(check_aux(TO,[])!)).

check_vcs_planificador(Opt) :-
   def_to(TO) &
   prolog_call(setlog(check_aux(TO,Opt)!)).

check_vcs_planificador(TO,Opt) :-
   prolog_call(setlog(check_aux(TO,Opt)!)).

check_aux(TO,Opt) :-
  prolog_call(
    (retractall(unsat_sol(_,_,_,_,_,_)),
     nb_setval(vc_num,0),
     nb_setval(vc_time,0),
     nb_setval(vc_ok,0),
     nb_setval(vc_err,0),
     nb_setval(vc_to,0)
    )
  ) &
  check_sat_vc(axioms_sat) &
  check_sat_vc(initDispatcher_sat_invPFun) &
  check_sat_vc(initDispatcher_sat_invIny) &
  check_sat_vc(initDispatcher_sat_invNat) &
  check_sat_vc(initDispatcher_sat_invDispatcher) &
  check_sat_vc(newProcess_is_sat) &
  check_sat_vc(dispatch_is_sat) &
  check_sat_vc(terminateProc_is_sat) &
  check_unsat_vc(newProcess_pi_invPFun(ProcQueue,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(newProcess_pi_invIny(ProcQueue,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(newProcess_pi_invNat(RemTicks,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(newProcess_pi_invDispatcher(ProcQueue,Current,ProcQueue,Current,RemTicks,NewProc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(dispatch_pi_invPFun(ProcQueue,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(dispatch_pi_invIny(ProcQueue,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(dispatch_pi_invNat(RemTicks,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(dispatch_pi_invDispatcher(ProcQueue,Current,ProcQueue,Current,RemTicks,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(terminateProc_pi_invPFun(ProcQueue,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(terminateProc_pi_invIny(ProcQueue,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(terminateProc_pi_invNat(RemTicks,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  check_unsat_vc(terminateProc_pi_invDispatcher(ProcQueue,Current,ProcQueue,Current,RemTicks,Proc,ProcQueue_,Current_,RemTicks_),TO,Opt) &
  prolog_call(
    (nb_getval(vc_num,VCN),
     nb_getval(vc_time,VCT),
     nb_getval(vc_ok,VCOK),
     nb_getval(vc_err,VCE),
     nb_getval(vc_to,VCTO)
    )
  ) &
  nl & nl &
  write("Total VCs: ") & write(VCN) &
  write(" (discharged: ") & write(VCOK) &
  write(", failed: ") & write(VCE) &
  write(", timeout: ") & write(VCTO) & write(")") & nl &
  write("Execution time (discharged): ") & write(VCT) & write(" s").

:- nl & prolog_call(ansi_format([bold,fg(green)],'Type checking has been deactivated.',[])) & nl & nl.

:- nl & prolog_call(ansi_format([bold,fg(green)],'Call check_vcs_planificador to run the verification conditions.',[])) & nl & nl.
